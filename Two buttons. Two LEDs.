#include <stdint.h>

void delay(uint32_t);

int main() {
    // Define register pointers
    uint32_t *pAHB1ENR  = (uint32_t *)0x40023830;  // RCC AHB1ENR
    uint32_t *pMODER    = (uint32_t *)0x40020000;  // GPIOA MODER
    uint32_t *pIDR      = (uint32_t *)0x40020010;  // GPIOA IDR
    uint32_t *pODR      = (uint32_t *)0x40020014;  // GPIOA ODR
    uint32_t *pPUPDR    = (uint32_t *)0x4002000C;  // GPIOA PUPDR

    // Enable GPIOA clock
    *pAHB1ENR |= (1 << 0);

    // === Configure LEDs ===

    // PA0 (LED1)
    *pMODER &= ~(0x3 << 0);     // Clear
    *pMODER |=  (0x1 << 0);     // Output mode (01)

    // PA10 (LED2)
    *pMODER &= ~(0x3 << 20);    // Clear
    *pMODER |=  (0x1 << 20);    // Output mode (01)

    // === Configure Buttons as Input with Pull-Up ===

    // PA2 (Button1)
    *pMODER &= ~(0x3 << 4);     // Input mode (00)
    *pPUPDR &= ~(0x3 << 4);     
    *pPUPDR |=  (0x1 << 4);     // Pull-up (01)

    // PA14 (Button2)
    *pMODER &= ~(0x3 << 28);    // Input mode (00)
    *pPUPDR &= ~(0x3 << 28);    
    *pPUPDR |=  (0x1 << 28);    // Pull-up (01)

    // === State Variables ===
    uint8_t blink1 = 0, blink2 = 0;
    uint8_t prev1 = 1, prev2 = 1;

    while (1) {
        uint8_t b1 = ((*pIDR >> 2) & 0x01);   // Read PA2
        uint8_t b2 = ((*pIDR >> 14) & 0x01);  // Read PA14

        // Toggle LED1 (PA0) on falling edge of Button1 (PA2)
        if (prev1 == 1 && b1 == 0) {
            blink1 ^= 1;
            delay(200); // debounce
        }

        // Toggle LED2 (PA10) on falling edge of Button2 (PA14)
        if (prev2 == 1 && b2 == 0) {
            blink2 ^= 1;
            delay(200); // debounce
        }

        prev1 = b1;
        prev2 = b2;

        // === LED1 Blink ===
        if (blink1) {
            *pODR |= (1 << 0);  
             delay(100);					// PA0 ON
					*pODR &=~ (1 << 0);  
             delay(100);
        } else {
            *pODR &= ~(1 << 0);    // PA0 OFF
					  
        }

        // === LED2 Blink ===
        if (blink2) {
            *pODR |= (1 << 10);    // PA10 ON
					delay(100);
					*pODR &= ~(1 << 10);    // PA10 ON
					delay(100);
					
        } else {
            *pODR &= ~(1 << 10);   // PA10 OFF
        }

        delay(100);  // blink timing
    }
}

// === Delay Function ===
void delay(uint32_t k) {
    for (uint32_t i = 0; i < 1234 * k; i++);
}
